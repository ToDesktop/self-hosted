name: Promote Release from Staging to Production

on:
  push:
    paths:
      - desktop-builds.json
      - desktop-releases.json
    branches:
      - main

jobs:
  promote:
    runs-on: ubuntu-latest
    if: github.repository_owner == 'ToDesktop'

    steps:
      ############################################################
      # (1) Check out the repo to get local desktop-builds.json
      ############################################################
      - name: Check out repo
        uses: actions/checkout@v3

      ############################################################
      # (2) Convert Cloudflare API token -> S3 credentials
      ############################################################
      - name: Derive S3 credentials from Cloudflare API token
        id: derive_s3_creds
        run: |
          set -e
          echo "Fetching CF token ID from /user/tokens/verify..."
          CF_TOKEN_ID=$(curl -s \
            https://api.cloudflare.com/client/v4/user/tokens/verify \
            -H "Authorization: Bearer $CLOUDFLARE_API_TOKEN" \
            | jq -r '.result.id'
          )

          if [ -z "$CF_TOKEN_ID" ] || [ "$CF_TOKEN_ID" == "null" ]; then
            echo "Failed to retrieve token ID. Check your token permissions."
            exit 1
          fi

          CF_TOKEN_HASH=$(echo -n "$CLOUDFLARE_API_TOKEN" | shasum -a 256 | awk '{print $1}')

          echo "AWS_ACCESS_KEY_ID=$CF_TOKEN_ID" >> $GITHUB_ENV
          echo "AWS_SECRET_ACCESS_KEY=$CF_TOKEN_HASH" >> $GITHUB_ENV
          echo "AWS_ENDPOINT_URL=https://${CLOUDFLARE_ACCOUNT_ID}.r2.cloudflarestorage.com" >> $GITHUB_ENV
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}

      ############################################################
      # (3) Install & configure rclone
      ############################################################
      - name: Install rclone
        run: |
          curl https://rclone.org/install.sh | sudo bash

      - name: Configure rclone
        run: |
          mkdir -p ~/.config/rclone
          cat > ~/.config/rclone/rclone.conf << EOF
          [r2]
          type = s3
          provider = Cloudflare
          access_key_id = ${AWS_ACCESS_KEY_ID}
          secret_access_key = ${AWS_SECRET_ACCESS_KEY}
          endpoint = ${AWS_ENDPOINT_URL}
          EOF

      ############################################################
      # (4) Download the remote desktop-builds.json from production (if any).
      #     We'll store it locally as remote_builds.json.
      #     If it doesn't exist, we create an empty file.
      ############################################################
      - name: Fetch remote desktop-builds.json
        id: fetch_remote
        run: |
          set -e  # Exit on any error
          echo "Attempting to download remote desktop-builds.json..."
          # Create a temporary directory for the download
          mkdir -p tmp_download

          # Download to the temporary directory
          rclone copy r2:desktop-app-distributables/desktop-builds.json tmp_download/ --verbose

          # Move the file to the desired location
          if [ -f tmp_download/desktop-builds.json ]; then
            mv tmp_download/desktop-builds.json ./remote_builds.json
            rm -rf tmp_download
            echo "Successfully downloaded remote_builds.json"
            ls -l remote_builds.json
          else
            echo "Warning: Failed to download remote_builds.json, creating empty file"
            echo "[]" > remote_builds.json
          fi

      ############################################################
      # (5) Parse remote_builds.json & local desktop-builds.json,
      #     find newly added builds (by their `id`)
      #
      # We'll store them in a comma-separated string "NEW_BUILD_IDS"
      # which we set as an output for the next step.
      ############################################################
      - name: Find newly added builds
        id: find_new_builds
        run: |
          echo "=== Starting Find newly added builds ==="

          # Check for local desktop-builds.json
          echo "Checking for local desktop-builds.json..."
          if [ ! -f desktop-builds.json ]; then
            echo "❌ Local desktop-builds.json not found or empty"
            echo "new_builds=" >> $GITHUB_OUTPUT
            echo "diff_result=nochange" >> $GITHUB_OUTPUT
            exit 0
          fi
          echo "✅ Found local desktop-builds.json"

          # Handle remote builds file
          echo "Checking remote_builds.json..."
          if [ -f remote_builds.json ]; then
            echo "✅ Found remote_builds.json"
            REMOTE_JSON=$(cat remote_builds.json)
            echo "Remote JSON content length: $(echo "$REMOTE_JSON" | wc -c) bytes"
          else
            echo "⚠️ No remote_builds.json found, using empty array"
            REMOTE_JSON="[]"
          fi

          echo "Reading local desktop-builds.json..."
          LOCAL_JSON=$(cat desktop-builds.json)
          echo "Local JSON content length: $(echo "$LOCAL_JSON" | wc -c) bytes"

          # Handle empty remote JSON
          if [ -z "$REMOTE_JSON" ]; then
            echo "⚠️ Remote JSON is empty, using empty array"
            REMOTE_JSON="[]"
          fi

          echo "Extracting remote IDs..."
          REMOTE_IDS=$(echo "$REMOTE_JSON" | jq -r 'map(.id) | join(" ")')
          echo "Remote IDs found: $REMOTE_IDS"

          echo "Extracting local IDs..."
          LOCAL_IDS=$(echo "$LOCAL_JSON" | jq -r 'map(.id) | join(" ")')
          echo "Local IDs found: $LOCAL_IDS"

          echo "Comparing IDs to find new builds..."
          newIDs=()
          for id in $LOCAL_IDS; do
            echo "Checking ID: $id"
            if [[ " $REMOTE_IDS " != *" $id "* ]]; then
              echo "✅ Found new build: $id"
              newIDs+=("$id")
            else
              echo "ℹ️ ID already exists in remote: $id"
            fi
          done

          echo "Number of new builds found: ${#newIDs[@]}"

          if [ ${#newIDs[@]} -eq 0 ]; then
            echo "📢 No new builds to promote"
            echo "new_builds=" >> $GITHUB_OUTPUT
            echo "diff_result=nochange" >> $GITHUB_OUTPUT
          else
            NEW_BUILDS_CSV=$(IFS=, ; echo "${newIDs[*]}")
            echo "📢 New builds to promote: $NEW_BUILDS_CSV"
            echo "new_builds=$NEW_BUILDS_CSV" >> $GITHUB_OUTPUT
            echo "diff_result=changed" >> $GITHUB_OUTPUT
          fi

          echo "=== Finished Find newly added builds ==="

      ############################################################
      # (6) Copy each newly added build from staging/<id>/ → production/
      #     Only runs if we have new builds (diff_result == changed)
      ############################################################
      - name: Promote each new build
        if: steps.find_new_builds.outputs.diff_result == 'changed'
        run: |
          IFS=',' read -ra build_ids <<< "${{ steps.find_new_builds.outputs.new_builds }}"
          for build_id in "${build_ids[@]}"; do
            echo "Promoting build_id=$build_id from staging -> production"
            rclone copy r2:desktop-app-distributables-staging/${build_id}/ r2:desktop-app-distributables/
          done

      ############################################################
      # (7) Upload updated desktop-builds.json and desktop-releases.json
      #     to production (only if changed)
      ############################################################
      - name: Copy desktop-builds.json & desktop-releases.json
        if: steps.find_new_builds.outputs.diff_result == 'changed'
        run: |
          if [ -f desktop-builds.json ]; then
            rclone copy desktop-builds.json r2:desktop-app-distributables/
          fi
          if [ -f desktop-releases.json ]; then
            rclone copy desktop-releases.json r2:desktop-app-distributables/
          fi

      ############################################################
      # (8) Purge Cloudflare cache if changed
      # TODO: Enabled this once caching support is enabled
      ############################################################
      # - name: Purge Cloudflare cache
      #   if: steps.find_new_builds.outputs.diff_result == 'changed'
      #   run: |
      #     echo "Purging entire CF cache for zone $CLOUDFLARE_ZONE_ID"
      #     curl -s -X POST "https://api.cloudflare.com/client/v4/zones/$CLOUDFLARE_ZONE_ID/purge_cache" \
      #       -H "Authorization: Bearer $CLOUDFLARE_API_TOKEN" \
      #       -H "Content-Type: application/json" \
      #       --data '{"purge_everything":true}'
      #   env:
      #     CLOUDFLARE_ZONE_ID: ${{ secrets.CLOUDFLARE_ZONE_ID }}
      #     CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
